From 13f5fa1825a2d6437a2ca5c2f367c94d5e7c4320 Mon Sep 17 00:00:00 2001
From: Tom Geelen <t.f.g.geelen@gmail.com>
Date: Sun, 25 May 2025 19:53:01 +0000
Subject: [PATCH] Add ilitek-ili9881d driver

Signed-off-by: Tom Geelen <t.f.g.geelen@gmail.com>
Upstream-Status: Pending
---
 drivers/gpu/drm/panel/Kconfig                 |   9 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 drivers/gpu/drm/panel/mipi_dsi.h              | 136 +++++
 drivers/gpu/drm/panel/mipi_dsi_drv.c          | 510 ++++++++++++++++++
 drivers/gpu/drm/panel/panel-ilitek-ili9881d.c | 311 +++++++++++
 drivers/gpu/drm/panel/touch_panel.c           | 190 +++++++
 6 files changed, 1157 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/mipi_dsi.h
 create mode 100644 drivers/gpu/drm/panel/mipi_dsi_drv.c
 create mode 100644 drivers/gpu/drm/panel/panel-ilitek-ili9881d.c
 create mode 100644 drivers/gpu/drm/panel/touch_panel.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 928b9f1bf7d5..688ed3166845 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -243,6 +243,15 @@ config DRM_PANEL_ILITEK_ILI9881C
 	  Say Y if you want to enable support for panels based on the
 	  Ilitek ILI9881c controller.
 
+config DRM_PANEL_ILITEK_ILI9881D
+	tristate "Ilitek ILI9881D-based panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+		Say Y if you want to enable support for panels based on the
+		Ilitek ILI9881d controller.
+
 config DRM_PANEL_ILITEK_ILI9882T
 	tristate "Ilitek ILI9882t-based panels"
 	depends on OF
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index c13a08111d0c..b7d72fe9d337 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -25,6 +25,7 @@ obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9805) += panel-ilitek-ili9805.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9806E) += panel-ilitek-ili9806e.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9806E_SPI) += panel-ilitek-ili9806e-spi.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9881C) += panel-ilitek-ili9881c.o
++obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9881D) += panel-ilitek-ili9881d.o mipi_dsi_drv.o touch_panel.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9882T) += panel-ilitek-ili9882t.o
 obj-$(CONFIG_DRM_PANEL_INNOLUX_EJ030NA) += panel-innolux-ej030na.o
 obj-$(CONFIG_DRM_PANEL_INNOLUX_P079ZCA) += panel-innolux-p079zca.o
diff --git a/drivers/gpu/drm/panel/mipi_dsi.h b/drivers/gpu/drm/panel/mipi_dsi.h
new file mode 100644
index 000000000000..a4963d0b6652
--- /dev/null
+++ b/drivers/gpu/drm/panel/mipi_dsi.h
@@ -0,0 +1,136 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * mipi_dsi.h - MIPI dsi module
+ *
+ * Copyright (c) 2020 Seeed Studio
+ * Zhangqun Ming<north_sea@qq.com>
+ *
+ * I2C slave address: 0x45
+ */
+
+#ifndef __MIPI_DSI_H__
+#define __MIPI_DSI_H__
+
+
+#include <linux/interrupt.h>
+#include <linux/bitops.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/fb.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_graph.h>
+#include <linux/pm.h>
+
+#include <drm/drm_crtc.h>
+#include <drm/drm_device.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_modes.h>
+
+#include <video/mipi_display.h>
+
+#include <linux/input.h>
+#include <linux/input/mt.h>
+#include <linux/input/touchscreen.h>
+
+#define MIPI_DSI_DRIVER_NAME        "mipi_dsi"
+
+#define I2C_DSI_DBG
+#ifdef I2C_DSI_DBG
+#define DBG_FUNC(format, x...)      printk(KERN_INFO MIPI_DSI_DRIVER_NAME ": (%s) " format "\n", __func__, ##x)
+#define DBG_PRINT(format, x...)     printk(KERN_INFO MIPI_DSI_DRIVER_NAME ": " format "\n", ##x)
+#else
+#define DBG_FUNC(format, x...)
+#define DBG_PRINT(format, x...)
+#endif
+
+/* i2c: commands */
+enum REG_ADDR {
+	REG_ID = 0x80,
+	REG_PORTA,	/* BIT(2) for horizontal flip, BIT(3) for vertical flip */
+	REG_PORTB,  // --
+	REG_PORTC,
+	REG_PORTD,
+	REG_POWERON,// --
+	REG_PWM,    // --
+	REG_DDRA,
+	REG_DDRB,
+	REG_DDRC,
+	REG_DDRD,
+	REG_TEST,
+	REG_WR_ADDRL,
+	REG_WR_ADDRH,
+	REG_READH,
+	REG_READL,
+	REG_WRITEH,
+	REG_WRITEL,
+	REG_ID2,
+
+	REG_LCD_RST,
+	REG_TP_RST,
+	REG_TP_STATUS,
+	REG_TP_POINT,
+	REG_TP_VERSION,
+	REG_ADC1,
+	REG_ADC2,
+	REG_MCU_AUTO_RESET,
+
+	REG_MAX
+};
+
+#define DSI_DCS_WRITE(dsi, seq...)		\
+	{									\
+		int ret = 0;					\
+		const u8 d[] = { seq };			\
+		ret = mipi_dsi_dcs_write_buffer(dsi, d, ARRAY_SIZE(d));	\
+		if (ret < 0)		\
+			return ret;		\
+	}
+
+struct panel_data {
+	void (*set_dsi)(struct mipi_dsi_device *dsi);
+	const struct drm_panel_funcs *funcs;
+};
+
+struct i2c_mipi_dsi {
+	struct i2c_client *i2c;
+	struct mutex mutex;
+
+	// panel
+	struct drm_panel panel;
+	struct panel_data *panel_data;
+
+	// dsi
+	struct mipi_dsi_device *dsi;
+
+	// tp
+	struct input_dev *input;
+	struct touchscreen_properties prop;
+	uint32_t tp_point_rotate;
+
+	// backlight
+	int brightness;
+
+	// mcu auto reset enable when the tp driver is not working
+	uint32_t mcu_auto_reset;
+};
+#define panel_to_md(_p)	container_of(_p, struct i2c_mipi_dsi, panel)
+
+
+/* i2c */
+int i2c_md_read(struct i2c_mipi_dsi *md, u8 reg, u8 *buf, int len);
+void i2c_md_write(struct i2c_mipi_dsi *md, u8 reg, u8 val);
+
+// touch panel
+int tp_init(struct i2c_mipi_dsi *md);
+int tp_deinit(struct i2c_mipi_dsi *md);
+
+#endif /*End of header guard macro */
diff --git a/drivers/gpu/drm/panel/mipi_dsi_drv.c b/drivers/gpu/drm/panel/mipi_dsi_drv.c
new file mode 100644
index 000000000000..42e3d31149d1
--- /dev/null
+++ b/drivers/gpu/drm/panel/mipi_dsi_drv.c
@@ -0,0 +1,510 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * This is a linux kernel driver for MIPI-DSI
+ * panel with touch panel attached to I2C bus.
+ *
+ * Copyright (c) 2020 Seeed Studio
+ * Zhangqun Ming<north_sea@qq.com>
+ *
+ * I2C slave address: 0x45
+ */
+#include "mipi_dsi.h"
+#include <linux/version.h>
+
+/*static */int i2c_md_read(struct i2c_mipi_dsi *md, u8 reg, u8 *buf, int len)
+{
+	struct i2c_client *client = md->i2c;
+	struct i2c_msg msgs[1];
+	u8 addr_buf[1] = { reg };
+	u8 data_buf[1] = { 0, };
+	int ret;
+
+	mutex_lock(&md->mutex);
+	/* Write register address */
+	msgs[0].addr = client->addr;
+	msgs[0].flags = 0;
+	msgs[0].len = ARRAY_SIZE(addr_buf);
+	msgs[0].buf = addr_buf;
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret != ARRAY_SIZE(msgs)) {
+		mutex_unlock(&md->mutex);
+		return -EIO;
+	}
+
+	usleep_range(1000, 1500);
+
+	/* Read data from register */
+	msgs[0].addr = client->addr;
+	msgs[0].flags = I2C_M_RD;
+	if (NULL == buf) {
+		msgs[0].len = 1;
+		msgs[0].buf = data_buf;
+	}
+	else {
+		msgs[0].len = len;
+		msgs[0].buf = buf;
+	}
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret != ARRAY_SIZE(msgs)) {
+		mutex_unlock(&md->mutex);
+		return -EIO;
+	}
+	mutex_unlock(&md->mutex);
+
+	if (NULL == buf) {
+		return data_buf[0];
+	}
+	else {
+		return ret;
+	}
+}
+
+/*static */void i2c_md_write(struct i2c_mipi_dsi *md, u8 reg, u8 val)
+{
+	struct i2c_client *client = md->i2c;
+	int ret;
+
+	mutex_lock(&md->mutex);
+	ret = i2c_smbus_write_byte_data(client, reg, val);
+	if (ret)
+		dev_err(&client->dev, "I2C write failed: %d\n", ret);
+
+	usleep_range(1000, 1500);
+	mutex_unlock(&md->mutex);
+}
+
+
+// MIPI-DSI driver
+
+static int mipi_dsi_probe(struct mipi_dsi_device *dsi)
+{
+	int ret;
+
+	DBG_PRINT("Probe MIPI-DSI driver");
+
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->lanes = 4;
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret) {
+		dev_err(&dsi->dev, "failed to attach dsi to host: %d\n", ret);
+	}
+
+	return ret;
+}
+
+static struct mipi_dsi_driver mipi_dsi_driver = {
+	.driver.name = MIPI_DSI_DRIVER_NAME,
+	.probe = mipi_dsi_probe,
+};
+
+
+// MIPI-DSI device
+
+static struct mipi_dsi_device *mipi_dsi_device(struct device *dev)
+{
+	struct mipi_dsi_device *dsi = NULL;
+	struct device_node *endpoint, *dsi_host_node;
+	struct mipi_dsi_host *host;
+	struct mipi_dsi_device_info info = {
+		.type = MIPI_DSI_DRIVER_NAME,
+		.channel = 0,
+		.node = NULL,
+	};
+
+	DBG_PRINT("Add MIPI-DSI device to device tree");
+
+	/* Look up the DSI host.  It needs to probe before we do. */
+	endpoint = of_graph_get_next_endpoint(dev->of_node, NULL);
+	if (!endpoint) {
+		dev_err(dev, "No endpoint node!");
+		return ERR_PTR(-ENODEV);
+	}
+
+	dsi_host_node = of_graph_get_remote_port_parent(endpoint);
+	if (!dsi_host_node) {
+		dev_err(dev, "No dsi_host node!");
+		goto error;
+	}
+
+	host = of_find_mipi_dsi_host_by_node(dsi_host_node);
+	of_node_put(dsi_host_node);
+	if (!host) {
+		dev_err(dev, "Can't find mipi_dsi_host!");
+		of_node_put(endpoint);
+		return ERR_PTR(-EPROBE_DEFER);
+	}
+
+	info.node = of_graph_get_remote_port(endpoint);
+	if (!info.node) {
+		dev_err(dev, "Can't get remote port!");
+		goto error;
+	}
+
+	of_node_put(endpoint);
+	dsi = mipi_dsi_device_register_full(host, &info);
+	if(IS_ERR(dsi)) {
+		dev_err(dev, "Can't device register_full!");
+		return dsi;
+	}
+
+	return dsi;
+
+error:
+	of_node_put(endpoint);
+	return ERR_PTR(-ENODEV);
+}
+
+
+// Panel
+
+static int panel_prepare(struct drm_panel *panel)
+{
+	int ret = 0;
+	struct i2c_mipi_dsi *md = panel_to_md(panel);
+	const struct drm_panel_funcs *funcs = md->panel_data->funcs;
+
+	DBG_PRINT("Prepare panel");
+
+	/* i2c */
+	/* reset pin */
+	i2c_md_write(md, REG_LCD_RST, 0);
+	msleep(20);
+	i2c_md_write(md, REG_LCD_RST, 1);
+	msleep(20);
+
+	/* panel */
+	if (funcs && funcs->prepare) {
+		ret = funcs->prepare(panel);
+		if (ret < 0){
+			i2c_md_write(md, REG_POWERON, 0);
+			i2c_md_write(md, REG_LCD_RST, 0);
+			i2c_md_write(md, REG_PWM, 0);
+			return ret;
+		}
+	}
+
+	return ret;
+}
+
+static int panel_unprepare(struct drm_panel *panel)
+{
+	int ret = 0;
+	struct i2c_mipi_dsi *md = panel_to_md(panel);
+	const struct drm_panel_funcs *funcs = md->panel_data->funcs;
+
+	DBG_PRINT("Unprepare panel");
+
+	if (funcs && funcs->unprepare) {
+		ret = funcs->unprepare(panel);
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
+}
+
+static int panel_enable(struct drm_panel * panel)
+{
+	int ret = 0;
+	struct i2c_mipi_dsi *md = panel_to_md(panel);
+	const struct drm_panel_funcs *funcs = md->panel_data->funcs;
+
+	DBG_PRINT("Enable panel");
+
+	/* panel */
+	if (funcs && funcs->enable) {
+		ret = funcs->enable(panel);
+		if (ret < 0)
+			return ret;
+	}
+
+	/* i2c */
+	i2c_md_write(md, REG_PWM, md->brightness);
+
+	return ret;
+}
+
+static int panel_disable(struct drm_panel * panel)
+{
+	int ret = 0;
+	struct i2c_mipi_dsi *md = panel_to_md(panel);
+	const struct drm_panel_funcs *funcs = md->panel_data->funcs;
+
+	DBG_PRINT("Disable panel");
+
+	/* i2c */
+	i2c_md_write(md, REG_PWM, 0);
+	i2c_md_write(md, REG_LCD_RST, 0);
+
+	/* panel */
+	if (funcs && funcs->disable) {
+		ret = funcs->disable(panel);
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
+}
+
+static int panel_get_modes(struct drm_panel *panel, struct drm_connector *connector)
+{
+	int ret = 0;
+	struct i2c_mipi_dsi *md = panel_to_md(panel);
+	const struct drm_panel_funcs *funcs = md->panel_data->funcs;
+
+	if (funcs && funcs->get_modes) {
+		ret = funcs->get_modes(panel, connector);
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
+}
+
+static const struct drm_panel_funcs panel_funcs = {
+	.prepare = panel_prepare,
+	.unprepare = panel_unprepare,
+	.enable = panel_enable,
+	.disable = panel_disable,
+	.get_modes = panel_get_modes,
+};
+
+
+// Backlight device
+
+static int backlight_update(struct backlight_device *bd)
+{
+	struct i2c_mipi_dsi *md = bl_get_data(bd);
+	int brightness = bd->props.brightness;
+
+	if (bd->props.power != FB_BLANK_UNBLANK ||
+		bd->props.fb_blank != FB_BLANK_UNBLANK ||
+		bd->props.state & (BL_CORE_SUSPENDED | BL_CORE_FBBLANK)) {
+			brightness = 0;
+		}
+
+	DBG_FUNC("brightness=%d", brightness);
+	md->brightness = brightness;
+	i2c_md_write(md, REG_PWM, brightness);
+
+	return 0;
+}
+
+static const struct backlight_ops backlight_ops = {
+	.options = BL_CORE_SUSPENDRESUME,
+	.update_status	= backlight_update,
+};
+
+static int backlight_init(struct i2c_mipi_dsi *md)
+{
+	struct device *dev = &md->i2c->dev;
+	struct backlight_properties props;
+	struct backlight_device *bd;
+
+	DBG_FUNC("Register backlight device");
+	memset(&props, 0, sizeof(props));
+	props.type = BACKLIGHT_RAW;
+	props.max_brightness = 255;
+	bd = devm_backlight_device_register(dev, dev_name(dev),
+					dev, md, &backlight_ops,
+					&props);
+	if (IS_ERR(bd)) {
+		dev_err(dev, "failed to register backlight\n");
+		return PTR_ERR(bd);
+	}
+
+	bd->props.brightness = 255;
+	backlight_update_status(bd);
+
+	return 0;
+}
+
+
+// I2C driver
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+static int i2c_md_probe(struct i2c_client *i2c)
+#else
+static int i2c_md_probe(struct i2c_client *i2c, const struct i2c_device_id *id)
+#endif
+{
+	struct device *dev = &i2c->dev;
+	struct i2c_mipi_dsi *md;
+	int ret = 0;
+	u8 mcu_img_ver[2];
+
+	DBG_PRINT("Probe I2C driver");
+	DBG_FUNC("Start");
+
+	md = devm_kzalloc(dev, sizeof(*md), GFP_KERNEL);
+	if (!md)
+		return -ENOMEM;
+
+	i2c_set_clientdata(i2c, md);
+	mutex_init(&md->mutex);
+	md->i2c = i2c;
+	md->panel_data = (struct panel_data *)of_device_get_match_data(dev);
+	if (!md->panel_data) {
+		dev_err(dev, "No valid panel data.\n");
+		return -ENODEV;
+	}
+
+	ret = i2c_md_read(md, REG_ID, NULL, 0);
+	if (ret < 0) {
+		dev_err(dev, "I2C read id failed: %d\n", ret);
+		return -ENODEV;
+	}
+	if (ret != 0xC3) {
+		dev_err(dev, "Unknown chip id: 0x%02x\n", ret);
+		return -ENODEV;
+	}
+
+	ret = i2c_md_read(md, REG_TP_VERSION, mcu_img_ver, ARRAY_SIZE(mcu_img_ver));
+	if (ret < 0) {
+		dev_err(dev, "I2C read STM32 firmware version failed: %d\n", ret);
+		return -ENODEV;
+	}
+	DBG_FUNC("STM32 firmware version %u.%u", mcu_img_ver[0], mcu_img_ver[1]);
+
+	i2c_md_write(md, REG_POWERON, 1);
+
+	md->dsi = mipi_dsi_device(dev);
+	if (IS_ERR(md->dsi)) {
+		dev_err(dev, "DSI device registration failed!\n");
+		return PTR_ERR(md->dsi);
+	}
+
+	DBG_FUNC("Add panel");
+	md->panel_data->set_dsi(md->dsi);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+	md->panel.prepare_prev_first = true;
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0)
+	md->panel.prepare_upstream_first = true;
+#endif
+	drm_panel_init(&md->panel, dev, &panel_funcs, DRM_MODE_CONNECTOR_DSI);
+	drm_panel_add(&md->panel);
+
+	tp_init(md);
+	backlight_init(md);
+
+	ret = device_property_read_u32(dev, "mcu_auto_reset_enable", &md->mcu_auto_reset);
+	if(ret < 0){	
+		dev_err(dev, "Can't get the data of mcu_auto_reset!\n");
+	}
+	i2c_md_write(md, REG_MCU_AUTO_RESET, (md->mcu_auto_reset&0xff));
+
+	ret = device_property_read_u32(dev, "tp_point_rotate", &md->tp_point_rotate);
+	if(ret < 0){	
+		dev_err(dev, "Can't get the data of tp_point_rotate!\n");
+	}
+
+	DBG_FUNC("Finish");
+	return 0;
+}
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0)
+static int i2c_md_remove(struct i2c_client *i2c)
+#else
+static void i2c_md_remove(struct i2c_client *i2c)
+#endif
+{
+	struct i2c_mipi_dsi *md = i2c_get_clientdata(i2c);
+
+	DBG_PRINT("Remove I2C driver");
+
+	tp_deinit(md);
+
+	/* Turn off power */
+	i2c_md_write(md, REG_POWERON, 0);
+	i2c_md_write(md, REG_LCD_RST, 0);
+	i2c_md_write(md, REG_PWM, 0);
+
+	mipi_dsi_detach(md->dsi);
+	drm_panel_remove(&md->panel);
+	mipi_dsi_device_unregister(md->dsi);
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0)
+	return 0;
+#endif
+}
+
+static void i2c_md_shutdown(struct i2c_client *i2c)
+{
+	struct i2c_mipi_dsi *md = i2c_get_clientdata(i2c);
+
+	DBG_PRINT("Shutdown I2C driver");
+
+	tp_deinit(md);
+
+	/* Turn off power */
+	i2c_md_write(md, REG_POWERON, 0);
+	i2c_md_write(md, REG_LCD_RST, 0);
+	i2c_md_write(md, REG_PWM, 0);
+
+	mipi_dsi_detach(md->dsi);
+	drm_panel_remove(&md->panel);
+	mipi_dsi_device_unregister(md->dsi);
+}
+
+extern const struct panel_data ili9881d_data;
+static const struct of_device_id i2c_md_of_ids[] = {
+	{
+		.compatible = "i2c_dsi,ili9881d",
+		.data = (const void*)&ili9881d_data,
+	},
+	{ } /* sentinel */
+};
+MODULE_DEVICE_TABLE(of, i2c_md_of_ids);
+
+static struct i2c_driver i2c_md_driver = {
+	.driver = {
+		.name = "mipi_dsi",
+		.of_match_table = i2c_md_of_ids,
+	},
+	.probe = i2c_md_probe,
+	.remove = i2c_md_remove,
+	.shutdown = i2c_md_shutdown,
+};
+
+
+// Kernel module
+
+static int __init i2c_md_init(void)
+{
+	int ret;
+
+	DBG_PRINT("Initialize kernel module");
+
+	DBG_FUNC("Add I2C driver");
+	ret = i2c_add_driver(&i2c_md_driver);
+	if (ret < 0)
+		return ret;
+
+	DBG_FUNC("Register MIPI-DSI driver");
+	ret = mipi_dsi_driver_register(&mipi_dsi_driver);
+	if (ret < 0)
+		return ret;
+
+	return ret;
+}
+module_init(i2c_md_init);
+
+static void __exit i2c_md_exit(void)
+{
+	DBG_PRINT("Exit kernel module");
+
+	DBG_FUNC("Unregister MIPI-DSI driver");
+	mipi_dsi_driver_unregister(&mipi_dsi_driver);
+
+	DBG_FUNC("Delete I2C driver");
+	i2c_del_driver(&i2c_md_driver);
+}
+module_exit(i2c_md_exit);
+
+MODULE_AUTHOR("Zhangqun Ming <north_sea@qq.com>");
+MODULE_AUTHOR("Seeed, Inc.");
+MODULE_DESCRIPTION("MIPI-DSI driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/gpu/drm/panel/panel-ilitek-ili9881d.c b/drivers/gpu/drm/panel/panel-ilitek-ili9881d.c
new file mode 100644
index 000000000000..e3aaded0cda2
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-ilitek-ili9881d.c
@@ -0,0 +1,311 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * ILI9881D panel driver
+ * 
+ * Copyright (c) 2020 Seeed Studio
+ * Zhangqun Ming<north_sea@qq.com>
+ */
+#include "mipi_dsi.h"
+
+
+static struct mipi_dsi_device *ili9881d_dsi = NULL;
+
+static const struct drm_display_mode ili9881d_modes = {
+	.clock		= 62712 /*73164*/ /*83616*/ /*94068*/ /*104520*/,
+
+	.hdisplay	= 720,
+	.hsync_start= 720 + 10,
+	.hsync_end	= 720 + 10 + 20,
+	.htotal		= 720 + 10 + 20 + 30,
+
+	.vdisplay	= 1280,
+	.vsync_start= 1280 + 10,
+	.vsync_end	= 1280 + 10 + 20,
+	.vtotal		= 1280 + 10 + 20 + 30,
+
+	.width_mm	= 62,
+	.height_mm	= 110,
+};
+
+static int ili9881d_get_modes(struct drm_panel *panel, struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+
+	// DBG_PRINT("Get ILI9881D mode");
+
+	mode = drm_mode_duplicate(connector->dev, &ili9881d_modes);
+	if (!mode) {
+		dev_err(panel->dev, "failed to add mode %ux%u@%u\n",
+			mode->hdisplay, mode->vdisplay,
+			drm_mode_vrefresh(mode));
+		return -ENOMEM;
+	}
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_set_name(mode);
+
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+#define ILI9881_PAGE(_page)					DSI_DCS_WRITE(dsi,0xff,0x98,0x81,_page)
+#define IILI9881_COMMAND(_cmd,_data...)		DSI_DCS_WRITE(dsi,_cmd,_data)
+static int ili9881d_prepare(struct drm_panel *panel)
+{
+	struct mipi_dsi_device *dsi = ili9881d_dsi;
+	int ret = 0;
+	u16 addr = 0xda;
+	u32 val[4] = {0};
+
+	DBG_PRINT("Prepare ILI9881D");
+
+	if (!dsi)
+		return -1;
+
+	ret = mipi_dsi_generic_read(dsi, &addr, sizeof(addr), &val, sizeof(val));
+	if(ret < 0){
+		DBG_FUNC("No LCD connected,pls check your hardware!");
+		return -ENODEV;
+	}
+	
+	ILI9881_PAGE(0x01);           
+	IILI9881_COMMAND(0x91,0x00);
+	IILI9881_COMMAND(0x92,0x00);
+	IILI9881_COMMAND(0x93,0x72);
+	IILI9881_COMMAND(0x94,0x00);
+	IILI9881_COMMAND(0x95,0x00);
+	IILI9881_COMMAND(0x96,0x09);
+	IILI9881_COMMAND(0x97,0x00);
+	IILI9881_COMMAND(0x98,0x00);
+
+	IILI9881_COMMAND(0x09,0x01);
+	IILI9881_COMMAND(0x0a,0x00);
+	IILI9881_COMMAND(0x0b,0x00);
+	IILI9881_COMMAND(0x0c,0x01);
+	IILI9881_COMMAND(0x0d,0x00);
+	IILI9881_COMMAND(0x0e,0x00);
+	IILI9881_COMMAND(0x0f,0x1D);
+	IILI9881_COMMAND(0x10,0x1D);
+	IILI9881_COMMAND(0x11,0x00);
+	IILI9881_COMMAND(0x12,0x00);
+	IILI9881_COMMAND(0x13,0x00);
+	IILI9881_COMMAND(0x14,0x00);
+	IILI9881_COMMAND(0x15,0x00);
+	IILI9881_COMMAND(0x16,0x00);
+	IILI9881_COMMAND(0x17,0x00);
+	IILI9881_COMMAND(0x18,0x00);
+	IILI9881_COMMAND(0x19,0x00);
+	IILI9881_COMMAND(0x1a,0x00);
+	IILI9881_COMMAND(0x1b,0x00);
+	IILI9881_COMMAND(0x1c,0x00);
+	IILI9881_COMMAND(0x1d,0x00);
+	IILI9881_COMMAND(0x1e,0xc0);
+	IILI9881_COMMAND(0x1f,0x00);
+	IILI9881_COMMAND(0x20,0x06);
+	IILI9881_COMMAND(0x21,0x02);
+	IILI9881_COMMAND(0x22,0x00);
+	IILI9881_COMMAND(0x23,0x00);
+	IILI9881_COMMAND(0x24,0x00);
+	IILI9881_COMMAND(0x25,0x00);
+	IILI9881_COMMAND(0x26,0x00);
+	IILI9881_COMMAND(0x27,0x00);
+	IILI9881_COMMAND(0x28,0x33);
+	IILI9881_COMMAND(0x29,0x03);
+	IILI9881_COMMAND(0x2a,0x00);
+	IILI9881_COMMAND(0x2b,0x00);
+	IILI9881_COMMAND(0x2c,0x00);
+	IILI9881_COMMAND(0x2d,0x00);
+	IILI9881_COMMAND(0x2e,0x00);
+	IILI9881_COMMAND(0x2f,0x00);
+	IILI9881_COMMAND(0x30,0x00);
+	IILI9881_COMMAND(0x31,0x00);
+	IILI9881_COMMAND(0x32,0x00);
+	IILI9881_COMMAND(0x33,0x00);
+	IILI9881_COMMAND(0x34,0x04);
+	IILI9881_COMMAND(0x35,0x00);
+	IILI9881_COMMAND(0x36,0x00);
+	IILI9881_COMMAND(0x37,0x00);
+	IILI9881_COMMAND(0x38,0x3C);
+	IILI9881_COMMAND(0x39,0x07);
+	IILI9881_COMMAND(0x3a,0x00);
+	IILI9881_COMMAND(0x3b,0x00);
+	IILI9881_COMMAND(0x3c,0x00);
+
+	IILI9881_COMMAND(0x40,0x03);
+	IILI9881_COMMAND(0x41,0x20);
+	IILI9881_COMMAND(0x42,0x00);
+	IILI9881_COMMAND(0x43,0x00);
+	IILI9881_COMMAND(0x44,0x03);
+	IILI9881_COMMAND(0x45,0x00);
+	IILI9881_COMMAND(0x46,0x01);
+	IILI9881_COMMAND(0x47,0x08);
+	IILI9881_COMMAND(0x48,0x00);
+	IILI9881_COMMAND(0x49,0x00);
+	IILI9881_COMMAND(0x4a,0x00);
+	IILI9881_COMMAND(0x4b,0x00);
+
+	// ==== GL[3OUT=
+	IILI9881_COMMAND(0x4c,0x01);
+	IILI9881_COMMAND(0x4d,0x54);
+	IILI9881_COMMAND(0x4e,0x57);
+	IILI9881_COMMAND(0x4f,0x9b);
+	IILI9881_COMMAND(0x50,0xf9);
+	IILI9881_COMMAND(0x51,0x27);
+	IILI9881_COMMAND(0x52,0x2f);
+	IILI9881_COMMAND(0x53,0xf2);
+	IILI9881_COMMAND(0x54,0xff);
+	IILI9881_COMMAND(0x55,0xff);
+	IILI9881_COMMAND(0x56,0xff);
+
+	// ==== GR[3OUT==
+	IILI9881_COMMAND(0x57,0x01);
+	IILI9881_COMMAND(0x58,0x54);
+	IILI9881_COMMAND(0x59,0x46);
+	IILI9881_COMMAND(0x5a,0x8a);
+	IILI9881_COMMAND(0x5b,0xf8);
+	IILI9881_COMMAND(0x5c,0x26);
+	IILI9881_COMMAND(0x5d,0x2f);
+	IILI9881_COMMAND(0x5e,0xf2);
+	IILI9881_COMMAND(0x5f,0xff);
+	IILI9881_COMMAND(0x60,0xff);
+	IILI9881_COMMAND(0x61,0xff);
+
+	IILI9881_COMMAND(0x62,0x06);
+
+	// == GOUT:4]_BWUTL[5:0]==
+	IILI9881_COMMAND(0x63,0x01);
+	IILI9881_COMMAND(0x64,0x00);
+	IILI9881_COMMAND(0x65,0xa4);
+	IILI9881_COMMAND(0x66,0xa5);
+	IILI9881_COMMAND(0x67,0x58);
+	IILI9881_COMMAND(0x68,0x5a);
+	IILI9881_COMMAND(0x69,0x54);
+	IILI9881_COMMAND(0x6a,0x56);
+	IILI9881_COMMAND(0x6b,0x06);
+	IILI9881_COMMAND(0x6c,0xff);
+	IILI9881_COMMAND(0x6d,0x08);
+	IILI9881_COMMAND(0x6e,0x02);
+	IILI9881_COMMAND(0x6f,0xff);
+	IILI9881_COMMAND(0x70,0x02);
+	IILI9881_COMMAND(0x71,0x02);
+	IILI9881_COMMAND(0x72,0xff);
+	IILI9881_COMMAND(0x73,0xff);
+	IILI9881_COMMAND(0x74,0xff);
+	IILI9881_COMMAND(0x75,0xff);
+	IILI9881_COMMAND(0x76,0xff);
+	IILI9881_COMMAND(0x77,0xff);
+	IILI9881_COMMAND(0x78,0xff);
+
+	// == GOUT:4]_BWUTR[5:0]==
+	IILI9881_COMMAND(0x79,0x01);
+	IILI9881_COMMAND(0x7a,0x00);
+	IILI9881_COMMAND(0x7b,0xa4);
+	IILI9881_COMMAND(0x7c,0xa5);
+	IILI9881_COMMAND(0x7d,0x59);
+	IILI9881_COMMAND(0x7e,0x5b);
+	IILI9881_COMMAND(0x7f,0x55);
+	IILI9881_COMMAND(0x80,0x57);
+	IILI9881_COMMAND(0x81,0x07);
+	IILI9881_COMMAND(0x82,0xff);
+	IILI9881_COMMAND(0x83,0x09);
+	IILI9881_COMMAND(0x84,0x02);
+	IILI9881_COMMAND(0x85,0xff);
+	IILI9881_COMMAND(0x86,0x02);
+	IILI9881_COMMAND(0x87,0x02);
+	IILI9881_COMMAND(0x88,0xff);
+	IILI9881_COMMAND(0x89,0xff);
+	IILI9881_COMMAND(0x8a,0xff);
+	IILI9881_COMMAND(0x8b,0xff);
+	IILI9881_COMMAND(0x8c,0xff);
+	IILI9881_COMMAND(0x8d,0xff);
+	IILI9881_COMMAND(0x8e,0xff);
+
+	IILI9881_COMMAND(0x8f,0x00);
+	IILI9881_COMMAND(0x90,0x00);
+
+	IILI9881_COMMAND(0x9d,0x00);
+	IILI9881_COMMAND(0x9e,0x00);
+
+	IILI9881_COMMAND(0xa0,0x35);
+	IILI9881_COMMAND(0xa1,0x00);
+	IILI9881_COMMAND(0xa2,0x00);
+	IILI9881_COMMAND(0xa3,0x00);
+	IILI9881_COMMAND(0xa4,0x00);
+	IILI9881_COMMAND(0xa5,0x00);
+	IILI9881_COMMAND(0xa6,0x08);
+	IILI9881_COMMAND(0xa7,0x00);
+	IILI9881_COMMAND(0xa8,0x00);
+	IILI9881_COMMAND(0xa9,0x00);
+	IILI9881_COMMAND(0xaa,0x00);
+	IILI9881_COMMAND(0xab,0x00);
+	IILI9881_COMMAND(0xac,0x00);
+	IILI9881_COMMAND(0xad,0x00);
+	IILI9881_COMMAND(0xae,0xff);
+	IILI9881_COMMAND(0xaf,0x00);
+	IILI9881_COMMAND(0xb0,0x00);
+
+	ILI9881_PAGE(0x02);
+	IILI9881_COMMAND(0x08,0x11);
+	IILI9881_COMMAND(0x0a,0x0c);
+	IILI9881_COMMAND(0x0f,0x06);
+	IILI9881_COMMAND(0xA0,0x00,0x26,0x35,0x16,0x19,0x2C,0x1F,0x1F,0x96,0x1C,0x28,0x80,0x1A,0x18,0x4C,0x21,0x27,0x55,0x65,0x39);
+	IILI9881_COMMAND(0xC0,0x00,0x26,0x35,0x16,0x19,0x2C,0x1F,0x1F,0x96,0x1C,0x28,0x80,0x1A,0x18,0x4C,0x21,0x27,0x55,0x65,0x39);
+
+	//===== GIP code finish =====//
+	IILI9881_COMMAND(0x4C,0xA4); // PS_EN on ,0x default :A4
+	IILI9881_COMMAND(0x18,0xF4); // SH on ,0x default E4 
+
+	//=========================//
+	ILI9881_PAGE(0x04);
+	IILI9881_COMMAND(0x5D,0xAF); // VREG1 5.5V 
+	IILI9881_COMMAND(0x5E,0xAF); // VREG2 5.5V
+	IILI9881_COMMAND(0x60,0x9B); // VCM1 
+	IILI9881_COMMAND(0x62,0x9B); // VCM2 
+	IILI9881_COMMAND(0x82,0x38); // VREF_VGH_MOD_CLPSEL 16V 
+	IILI9881_COMMAND(0x84,0x38); // VREF_VGH_DC 16V     
+	IILI9881_COMMAND(0x86,0x18); // VREF_VGL_CLPSEL -10V       
+	IILI9881_COMMAND(0x66,0xC4); // VGH_AC x4 ,0xdefault :04
+	IILI9881_COMMAND(0xC1,0xF0); // VGH_DC x4 ,0xdefault :70
+	IILI9881_COMMAND(0x70,0x60);
+	IILI9881_COMMAND(0x71,0x00);
+
+	//=========================//
+	IILI9881_COMMAND(0x5B,0x33); // vcore_sel Voltage
+	IILI9881_COMMAND(0x6C,0x10); // vcore bias L
+	IILI9881_COMMAND(0x77,0x03); // vcore_sel Voltage
+	IILI9881_COMMAND(0x7B,0x02); // vcore bias R
+
+	//=========================//
+	ILI9881_PAGE(0x01);
+	IILI9881_COMMAND(0xF0,0x00); // 1280 Gate NL
+	IILI9881_COMMAND(0xF1,0xC8); // 1280 Gate NL
+
+	ILI9881_PAGE(0x05);
+	IILI9881_COMMAND(0x22,0x3A); // RGB to BGR
+
+	ILI9881_PAGE(0x00);     
+	IILI9881_COMMAND(0x35,0x00);           
+
+	IILI9881_COMMAND(0x11);
+	msleep(120);
+	IILI9881_COMMAND(0x29);
+
+	return 0;
+}
+
+static const struct drm_panel_funcs ili9881d_funcs = {
+	.get_modes = ili9881d_get_modes,
+	.prepare = ili9881d_prepare,
+};
+
+static void ili9881d_set_dsi(struct mipi_dsi_device *dsi)
+{
+	ili9881d_dsi = dsi;
+}
+
+const struct panel_data ili9881d_data = {
+	.set_dsi = ili9881d_set_dsi,
+	.funcs = &ili9881d_funcs,
+};
\ No newline at end of file
diff --git a/drivers/gpu/drm/panel/touch_panel.c b/drivers/gpu/drm/panel/touch_panel.c
new file mode 100644
index 000000000000..725abef6b152
--- /dev/null
+++ b/drivers/gpu/drm/panel/touch_panel.c
@@ -0,0 +1,190 @@
+#include "mipi_dsi.h"
+
+
+#define GOODIX_STATUS_SIZE		        2
+#define GOODIX_CONTACT_SIZE		        8
+#define GOODIX_BUFFER_STATUS_READY	    (((uint32_t)0x01)<<7)//BIT(7)
+#define GOODIX_HAVE_KEY			        (((uint32_t)0x01)<<4)//BIT(4)
+
+#define TP_DEFAULT_WIDTH	1280
+#define TP_DEFAULT_HEIGHT	720
+#define TP_MAX_POINTS       5
+#define TP_POLL_INTERVAL    15
+
+
+static int goodix_ts_read_input_report(struct i2c_mipi_dsi *md, u8 *data)
+{
+	int header = GOODIX_STATUS_SIZE + GOODIX_CONTACT_SIZE;
+	int i, ret, touch_num;
+
+	for (i=0; i<2; i++) {
+		ret = i2c_md_read(md, REG_TP_STATUS, data, header);
+		if (ret < 0) {
+			return -EIO;
+		}
+
+		if (data[0] & GOODIX_BUFFER_STATUS_READY) {
+			touch_num = data[0] & 0x0f;
+			if (touch_num > TP_MAX_POINTS)
+				return -EPROTO;
+
+			if (touch_num > 1) {
+				ret = i2c_md_read(md, REG_TP_POINT, data+header, (touch_num-1)*GOODIX_CONTACT_SIZE);
+				if (ret < 0)
+					return -EIO;
+			}
+			return touch_num;
+		}
+
+		usleep_range(3000, 5000); /* Poll every 3 - 5 ms */
+	}
+
+	/*
+	 * The Goodix panel will send spurious interrupts after a
+	 * 'finger up' event, which will always cause a timeout.
+	 */
+	return -ENOMSG;
+}
+
+//TODO
+//need more work for it's compatibility
+static void x_y_rotate(int *x, int *y)
+{
+        int temp_x,temp_y;
+        int temp;
+
+        if(*x < 0 || *y < 0) {
+		printk(KERN_ERR"%s<%d> parameter error\n", __func__, __LINE__);
+                return ;
+	}
+        //1 move rectangle center to (0,0)
+        temp_x = *x - TP_DEFAULT_WIDTH/2;
+        temp_y = *y - TP_DEFAULT_HEIGHT/2;
+
+        //2 rotate the point anti-clockwise for 90 degree
+        temp = temp_x;
+        temp_x = temp_y;
+        temp_y = temp;
+
+        temp_x *= (-1);
+        temp_y *= 1;
+
+        //3 zoom
+        temp_x = temp_x * TP_DEFAULT_WIDTH / TP_DEFAULT_HEIGHT;
+        temp_y = temp_y * TP_DEFAULT_HEIGHT / TP_DEFAULT_WIDTH;
+
+        //4 move rectangle center back to (TP_DEFAULT_WIDTH/2, TP_DEFAULT_HEIGHT/2)
+        temp_x += TP_DEFAULT_WIDTH/2;
+        temp_y += TP_DEFAULT_HEIGHT/2;
+
+        *x = temp_x;
+        *y = temp_y;
+}
+
+static void goodix_ts_report_touch_8b(struct i2c_mipi_dsi *md, u8 *coor_data)
+{
+	struct input_dev *input_dev = md->input;
+	int id = coor_data[7];
+	int input_x = 0;
+	int input_y = 0;
+	int input_w = coor_data[4];
+
+	input_x = coor_data[1];
+	input_x <<= 8;
+	input_x += coor_data[0];
+	
+	input_y = coor_data[3];
+	input_y <<= 8;
+	input_y += coor_data[2];
+
+	if(md->tp_point_rotate)
+		x_y_rotate(&input_x, &input_y);
+
+	input_mt_slot(input_dev, id);
+	input_mt_report_slot_state(input_dev, MT_TOOL_FINGER, true);
+	touchscreen_report_pos(input_dev, &md->prop, input_x, input_y, true);
+	input_report_abs(input_dev, ABS_MT_TOUCH_MAJOR, input_w);
+	input_report_abs(input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+}
+
+static void tp_poll_func(struct input_dev *input)
+{
+	struct i2c_mipi_dsi *md = (struct i2c_mipi_dsi *)input_get_drvdata(input);
+	u8  point_data[GOODIX_STATUS_SIZE + TP_MAX_POINTS * GOODIX_CONTACT_SIZE] = { 0 };
+	int touch_num;
+	int i;
+
+	touch_num = goodix_ts_read_input_report(md, point_data);
+	if (touch_num < 0) {
+		return;
+	}
+
+	for (i = 0; i < touch_num; i++) {
+		goodix_ts_report_touch_8b(md, &point_data[GOODIX_STATUS_SIZE + i*GOODIX_CONTACT_SIZE]);
+	}
+
+	input_mt_sync_frame(input);
+	input_sync(input);
+}
+
+int tp_init(struct i2c_mipi_dsi *md)
+{
+	struct i2c_client *i2c = md->i2c;
+	struct device *dev = &i2c->dev;
+	struct input_dev *input;
+	int ret;
+
+	input = devm_input_allocate_device(dev);
+	if (!input) {
+		dev_err(dev, "Failed to allocate input device\n");
+		return -ENOMEM;
+	}
+	md->input = input;
+	input_set_drvdata(input, md);
+
+	input->dev.parent = dev;
+	input->name = "seeed-tp";
+	input->id.bustype = BUS_I2C;
+	input->id.vendor = 0x1234;
+	input->id.product = 0x1001;
+	input->id.version = 0x0100;
+
+	input_set_abs_params(input, ABS_MT_WIDTH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(input, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(input, ABS_MT_POSITION_X, 0, TP_DEFAULT_WIDTH, 0, 0);
+	input_set_abs_params(input, ABS_MT_POSITION_Y, 0, TP_DEFAULT_HEIGHT, 0, 0);
+	//touchscreen_parse_properties(input, true, &md->prop);
+ #if 0
+	md->prop.max_x = 1024;//TP_DEFAULT_WIDTH;
+	md->prop.max_y = 768;//TP_DEFAULT_HEIGHT;
+	md->prop.invert_x = 0;
+	md->prop.invert_y = 1;
+	md->prop.swap_x_y = 1;
+#endif
+	ret = input_mt_init_slots(input, TP_MAX_POINTS, INPUT_MT_DIRECT | INPUT_MT_DROP_UNUSED);
+	if (ret) {
+		dev_err(dev, "could not init mt slots, %d\n", ret);
+		return ret;
+	}
+
+	ret = input_setup_polling(input, tp_poll_func);
+	if (ret) {
+		dev_err(dev, "could not set up polling mode, %d\n", ret);
+		return ret;
+	}
+	input_set_poll_interval(input, TP_POLL_INTERVAL);
+
+	ret = input_register_device(input);
+	if (ret) {
+		dev_err(dev, "could not register input device, %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+int tp_deinit(struct i2c_mipi_dsi *md)
+{
+	input_unregister_device(md->input);
+	return 0;
+}
\ No newline at end of file
