header:
  version: 14

repos:
  meta-sanctum:
    path: "meta-sanctum"

  poky:
    url: "https://github.com/yoctoproject/poky.git"
    # url: "https://github.com/Gerry546/poky.git"
    branch: master
    layers:
      meta:
    path: "sources/poky"

  meta-openembedded:
    # url: "https://github.com/Gerry546/meta-openembedded.git"
    url: "https://github.com/openembedded/meta-openembedded.git"
    branch: master
    layers:
      meta-oe:
      meta-python:
      meta-networking:
    path: "sources/meta-openembedded"

  meta-browser:
    #url: "https://github.com/OSSystems/meta-browser/"
    url: "https://github.com/Gerry546/meta-browser.git"
    path: "sources/meta-browser"
    layers:
      meta-firefox:
    branch: "master"
  
  meta-clang:
    url: "https://github.com/kraj/meta-clang"
    path: "sources/meta-clang"
    branch: "master"

  meta-rauc:
    # url: "https://github.com/Gerry546/meta-rauc.git"
    url: "https://github.com/rauc/meta-rauc.git"
    path: "sources/meta-rauc"
    branch: "master"
  
local_conf_header:
  sanctum: |
    #
    # Machine Selection
    #
    # You need to select a specific machine to target the build with. There are a selection
    # of emulated machines available which can boot and run in the QEMU emulator:
    #
    # This sets the default machine to be qemuarm64 if no other machine is selected:
    MACHINE ??= "qemuarm64-a72"

    #
    # Where to place downloads
    #
    DL_DIR = "/cache/downloads"

    #
    # Where to place shared-state files
    #
    SSTATE_DIR = "/cache/sstate"

    #
    # Package Management configuration
    #
    # This variable lists which packaging formats to enable. Multiple package backends
    # can be enabled at once and the first item listed in the variable will be used
    # to generate the root filesystems.
    # Options are:
    #  - 'package_deb' for debian style deb files
    #  - 'package_ipk' for ipk files are used by opkg (a debian style embedded package manager)
    #  - 'package_rpm' for rpm style packages
    # E.g.: PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"
    # OE-Core defaults to ipkg, whilst Poky defaults to rpm:
    PACKAGE_CLASSES = "package_ipk"

    #
    # SDK target architecture
    #
    # This variable specifies the architecture to build SDK items for and means
    # you can build the SDK packages for architectures other than the machine you are
    # running the build on (i.e. building i686 packages on an x86_64 host).
    # Supported values are i686, x86_64, aarch64
    SDKMACHINE ?= "x86_64"

    #
    # Extra image configuration defaults
    #
    # The EXTRA_IMAGE_FEATURES variable allows extra packages to be added to the generated
    # images. Some of these options are added to certain image types automatically. Some
    # of the features available are:
    #  "dbg-pkgs"             - add -dbg packages for all installed packages
    #                           (adds symbol information for debugging/profiling)
    #  "src-pkgs"             - add -src packages for all installed packages
    #                           (adds source code for debugging)
    #  "dev-pkgs"             - add -dev packages for all installed packages
    #                           (useful if you want to develop against libs in the image)
    #  "ptest-pkgs"           - add -ptest packages for all ptest-enabled packages
    #                           (useful if you want to run the package test suites)
    #  "tools-sdk"            - add development tools (gcc, make, pkgconfig etc.)
    #  "tools-debug"          - add debugging tools (gdb, strace)
    #  "eclipse-debug"        - add Eclipse remote debugging support
    #  "tools-profile"        - add profiling tools (oprofile, lttng, valgrind)
    #  "tools-testapps"       - add useful testing tools (ts_print, aplay, arecord etc.)
    #  "allow-empty-password" - allow users to have an empty password
    #  "empty-root-password"  - the root user has no password set
    #  "allow-root-login      - the root user can login
    # There are other features that can be used here too, see
    # meta/classes-recipe/image.bbclass and
    # meta/classes-recipe/core-image.bbclass for more details.
    # We default to allowing root login without a password for convenience.
    # EXTRA_IMAGE_FEATURES ?= "allow-empty-password empty-root-password allow-root-login"

    #
    # Additional image features
    #
    # The following is a list of additional classes to use when building images which
    # enable extra features. Some available options which can be included in this variable
    # are:
    #   - 'buildstats' collect build statistics
    USER_CLASSES ?= "buildstats"

    #
    # Interactive shell configuration
    #
    # Under certain circumstances the system may need input from you and to do this it
    # can launch an interactive shell. It needs to do this since the build is
    # multithreaded and needs to be able to handle the case where more than one parallel
    # process may require the user's attention. The default is iterate over the available
    # terminal types to find one that works.
    #
    # Examples of the occasions this may happen are when resolving patches which cannot
    # be applied, to use the devshell or the kernel menuconfig
    #
    # Supported values are auto, gnome, xfce, rxvt, screen, konsole (KDE 3.x only), none
    # Note: currently, Konsole support only works for KDE 3.x due to the way
    # newer Konsole versions behave
    #OE_TERMINAL = "auto"
    # By default disable interactive patch resolution (tasks will just fail instead):
    PATCHRESOLVE = "noop"

    #
    # Disk Space Monitoring during the build
    #
    # Monitor the disk space during the build. If there is less that 1GB of space or less
    # than 100K inodes in any key build location (TMPDIR, DL_DIR, SSTATE_DIR), gracefully
    # shutdown the build. If there is less than 100MB or 1K inodes, perform a hard halt
    # of the build. The reason for this is that running completely out of space can corrupt
    # files and damages the build in ways which may not be easily recoverable.
    # It's necessary to monitor /tmp, if there is no space left the build will fail
    # with very exotic errors.
    BB_DISKMON_DIRS ??= "\
        STOPTASKS,${TMPDIR},1G,100K \
        STOPTASKS,${DL_DIR},1G,100K \
        STOPTASKS,${SSTATE_DIR},1G,100K \
        STOPTASKS,/tmp,100M,100K \
        HALT,${TMPDIR},100M,1K \
        HALT,${DL_DIR},100M,1K \
        HALT,${SSTATE_DIR},100M,1K \
        HALT,/tmp,10M,1K"

    #
    # Shared-state files from other locations
    #
    # As mentioned above, shared state files are prebuilt cache data objects which can be
    # used to accelerate build time. This variable can be used to configure the system
    # to search other mirror locations for these objects before it builds the data itself.
    #
    # This can be a filesystem directory, or a remote url such as https or ftp. These
    # would contain the sstate-cache results from previous builds (possibly from other
    # machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
    # cache locations to check for the shared objects.
    # NOTE: if the mirror uses the same structure as SSTATE_DIR, you need to add PATH
    # at the end as shown in the examples below. This will be substituted with the
    # correct path within the directory structure.
    #SSTATE_MIRRORS ?= "\
    #file://.* https://someserver.tld/share/sstate/PATH;downloadfilename=PATH \
    #file://.* file:///some/local/dir/sstate/PATH"

    #
    # Yocto Project SState Mirror
    #
    # The Yocto Project has prebuilt artefacts available for its releases, you can enable
    # use of these by uncommenting some of the following lines. This will mean the build uses
    # the network to check for artefacts at the start of builds, which does slow it down
    # initially but it will then speed up the builds by not having to build things if they are
    # present in the cache. It assumes you can download something faster than you can build it
    # which will depend on your network.
    # Note: For this to work you also need hash-equivalence passthrough to the matching server
    # There is a choice between our sstate server directly and a faster content delivery network
    # (CDN) kindly provided by JSDelivr, uncomment one of the SSTATE_MIRRORS lines, not both.
    # Using the CDN rather than the yoctoproject.org address is suggested/preferred.
    #
    #BB_HASHSERVE_UPSTREAM = 'wss://hashserv.yoctoproject.org/ws'
    #SSTATE_MIRRORS ?= "file://.* http://sstate.yoctoproject.org/all/PATH;downloadfilename=PATH"

    #
    # Qemu configuration
    #
    # By default native qemu will build with a builtin VNC server and a SDL UI frontend
    # where graphical output can be seen.
    # By default libsdl2-native will be built, if you want to use your host's libSDL instead of 
    # the minimal libsdl built by libsdl2-native then uncomment the ASSUME_PROVIDED line below.
    #ASSUME_PROVIDED += "libsdl2-native"

    # You can also enable the Gtk UI frontend, which takes somewhat longer to build, but adds
    # a handy set of menus for controlling the emulator.
    #PACKAGECONFIG:append:pn-qemu-system-native = " gtk+"

    #
    # Hash Equivalence
    #
    # Enable support for automatically running a local hash equivalence server and
    # instruct bitbake to use a hash equivalence aware signature generator. Hash
    # equivalence improves reuse of sstate by detecting when a given sstate
    # artifact can be reused as equivalent, even if the current task hash doesn't
    # match the one that generated the artifact.
    #
    # A shared hash equivalent server can be set with "<HOSTNAME>:<PORT>" format
    #
    #BB_HASHSERVE = "auto"
    #BB_SIGNATURE_HANDLER = "OEEquivHash"

    #
    # Memory Resident Bitbake
    #
    # Bitbake's server component can stay in memory after the UI for the current command
    # has completed. This means subsequent commands can run faster since there is no need
    # for bitbake to reload cache files and so on. Number is in seconds, after which the
    # server will shut down.
    #
    #BB_SERVER_TIMEOUT = "60"

    # CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
    # track the version of this file when it was generated. This can safely be ignored if
    # this doesn't mean anything to you.
    CONF_VERSION = "2"

    LICENSE_FLAGS_ACCEPTED = "\
        commercial_ffmpeg \
    "
    
  qemu-settings: |
    # Port forwarding settings
    QB_SLIRP_OPT:qemuall = "-netdev user,id=net0,hostfwd=tcp:127.0.0.1:2222-:22,hostfwd=tcp::8888-:8123"
    QB_MEM:qemuall = "-m 12288"
    QB_SMP:qemux86-64 = "-smp 12"