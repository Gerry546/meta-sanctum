header:
  version: 16

distro: sanctum

repos:
  meta-sanctum:
    path: "."

  poky:
    url: "https://git.yoctoproject.org/git/poky"
    branch: master
    layers:
      meta:
    path: "sources/poky"

  meta-openembedded:
    url: "https://github.com/Gerry546/meta-openembedded.git"
    # url: "https://github.com/openembedded/meta-openembedded.git"
    branch: master-devel
    layers:
      meta-oe:
      meta-python:
      meta-networking:
    path: "sources/meta-openembedded"

  meta-homeassistant:
    url: "https://github.com/Gerry546/meta-homeassistant.git"
    path: "sources/meta-homeassistant"
    branch: "2024.6.0"

  meta-browser:
    url: "https://github.com/OSSystems/meta-browser/"
    path: "sources/meta-browser"
    layers:
      meta-chromium:
    branch: "master"
  
  meta-clang:
    url: "https://github.com/kraj/meta-clang"
    path: "sources/meta-clang"
    branch: "master"
  
local_conf_header:
  sanctum: |
    #
    # Machine Selection
    #
    # You need to select a specific machine to target the build with. There are a selection
    # of emulated machines available which can boot and run in the QEMU emulator:
    #
    # This sets the default machine to be qemuarm64 if no other machine is selected:
    MACHINE ??= "qemuarm64-a72"

    #
    # Where to place downloads
    #
    DL_DIR = "/cache/downloads"

    #
    # Where to place shared-state files
    #
    SSTATE_DIR = "/cache/sstate"

    #
    # Default policy config
    #
    DISTRO ?= "sanctum"

    #
    # Package Management configuration
    #
    PACKAGE_CLASSES = "package_ipk"

    #
    # SDK target architecture
    #
    SDKMACHINE ?= "x86_64"

    #
    # Extra image configuration defaults
    #
    # The EXTRA_IMAGE_FEATURES variable allows extra packages to be added to the generated
    # images. Some of these options are added to certain image types automatically. The
    # variable can contain the following options:
    #  "dbg-pkgs"       - add -dbg packages for all installed packages
    #                     (adds symbol information for debugging/profiling)
    #  "src-pkgs"       - add -src packages for all installed packages
    #                     (adds source code for debugging)
    #  "dev-pkgs"       - add -dev packages for all installed packages
    #                     (useful if you want to develop against libs in the image)
    #  "ptest-pkgs"     - add -ptest packages for all ptest-enabled packages
    #                     (useful if you want to run the package test suites)
    #  "tools-sdk"      - add development tools (gcc, make, pkgconfig etc.)
    #  "tools-debug"    - add debugging tools (gdb, strace)
    #  "eclipse-debug"  - add Eclipse remote debugging support
    #  "tools-profile"  - add profiling tools (oprofile, lttng, valgrind)
    #  "tools-testapps" - add useful testing tools (ts_print, aplay, arecord etc.)
    #  "debug-tweaks"   - make an image suitable for development
    #                     e.g. ssh root access has a blank password
    # There are other application targets that can be used here too, see
    # meta/classes-recipe/image.bbclass and
    # meta/classes-recipe/core-image.bbclass for more details.
    # EXTRA_IMAGE_FEATURES ?= "debug-tweaks"

    #
    # Additional image features
    #
    USER_CLASSES ?= "buildstats"

    #
    # Interactive shell configuration
    #
    # Under certain circumstances the system may need input from you and to do this it
    # can launch an interactive shell. It needs to do this since the build is
    # multithreaded and needs to be able to handle the case where more than one parallel
    # process may require the user's attention. The default is iterate over the available
    # terminal types to find one that works.
    #
    # Examples of the occasions this may happen are when resolving patches which cannot
    # be applied, to use the devshell or the kernel menuconfig
    #
    # Supported values are auto, gnome, xfce, rxvt, screen, konsole (KDE 3.x only), none
    # Note: currently, Konsole support only works for KDE 3.x due to the way
    # newer Konsole versions behave
    #OE_TERMINAL = "auto"
    # By default disable interactive patch resolution (tasks will just fail instead):
    PATCHRESOLVE = "noop"

    #
    # Disk Space Monitoring during the build
    #
    BB_DISKMON_DIRS ??= "\
        STOPTASKS,${TMPDIR},1G,100K \
        STOPTASKS,${DL_DIR},1G,100K \
        STOPTASKS,${SSTATE_DIR},1G,100K \
        STOPTASKS,/tmp,100M,100K \
        HALT,${TMPDIR},100M,1K \
        HALT,${DL_DIR},100M,1K \
        HALT,${SSTATE_DIR},100M,1K \
        HALT,/tmp,10M,1K"

    #
    # Shared-state files from other locations
    #
    # As mentioned above, shared state files are prebuilt cache data objects which can be
    # used to accelerate build time. This variable can be used to configure the system
    # to search other mirror locations for these objects before it builds the data itself.
    #
    # This can be a filesystem directory, or a remote url such as https or ftp. These
    # would contain the sstate-cache results from previous builds (possibly from other
    # machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
    # cache locations to check for the shared objects.
    # NOTE: if the mirror uses the same structure as SSTATE_DIR, you need to add PATH
    # at the end as shown in the examples below. This will be substituted with the
    # correct path within the directory structure.
    #SSTATE_MIRRORS ?= "\
    #file://.* https://someserver.tld/share/sstate/PATH;downloadfilename=PATH \
    #file://.* file:///some/local/dir/sstate/PATH"

    #
    # Yocto Project SState Mirror
    #
    # The Yocto Project has prebuilt artefacts available for its releases, you can enable
    # use of these by uncommenting the following lines. This will mean the build uses
    # the network to check for artefacts at the start of builds, which does slow it down
    # equally, it will also speed up the builds by not having to build things if they are
    # present in the cache. It assumes you can download something faster than you can build it
    # which will depend on your network.
    # Note: For this to work you also need hash-equivalence passthrough to the matching server
    #
    #BB_HASHSERVE_UPSTREAM = "hashserv.yocto.io:8687"
    #SSTATE_MIRRORS ?= "file://.* http://sstate.yoctoproject.org/all/PATH;downloadfilename=PATH"

    #
    # Qemu configuration
    #
    PACKAGECONFIG:append:pn-qemu-system-native = " gtk+"

    #
    # Hash Equivalence
    #
    # Enable support for automatically running a local hash equivalence server and
    # instruct bitbake to use a hash equivalence aware signature generator. Hash
    # equivalence improves reuse of sstate by detecting when a given sstate
    # artifact can be reused as equivalent, even if the current task hash doesn't
    # match the one that generated the artifact.
    #
    # A shared hash equivalent server can be set with "<HOSTNAME>:<PORT>" format
    #
    #BB_HASHSERVE = "auto"
    #BB_SIGNATURE_HANDLER = "OEEquivHash"

    # CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
    # track the version of this file when it was generated. This can safely be ignored if
    # this doesn't mean anything to you.
    CONF_VERSION = "2"

    LICENSE_FLAGS_ACCEPTED = "\
        commercial_ffmpeg \
    "
